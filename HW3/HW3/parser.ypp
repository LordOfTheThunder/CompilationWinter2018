%{

#include <iostream>
#include <cstdlib>
#include <cassert>
#include <string>
using namespace std;

#include "StackStructs.h"
#include "output.hpp"
#include "symbolTable.hpp"
using namespace output;

int yylex();
void yyerror(const char *);
symbolTable* tables = NULL;

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token STRUCT
%left AND
%left OR
%right NOT
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token PERIOD
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%left ASSIGN
%nonassoc RELOP
%left BINOPMD
%left BINOPAS
%token ID
%token NUM
%token STRING


%%
Program: Structs Funcs  {
}

Funcs: FuncDecl Funcs {
}
	|	/*epsilon*/ ;

FuncDecl: FuncDecl1 FuncDecl2 {
	tables->popScope();
}

FuncDecl1: RetType ID LPAREN Formals RPAREN {
	tables->addFunction(typeToString($1.type), $2.str, $4.func_info, $1.lineno);
}

FuncDecl2: LBRACE Statements RBRACE {

}

Structs: StructsDecl Structs {
}
	| /*epsilon*/ {

	}

StructsDecl: STRUCT ID LBRACE StructMemList RBRACE SC {
	$$.str = string("struct<" + $2.str + ">");
	$$.func_info = $4.func_info;
	tables->addStruct($$.str, $$.func_info, $1.lineno);
}

RetType: Type {
	$$.type = $1.type;
}
	| VOID {
		$$.type = types_Void;
	}

Formals: FormalsList {

}
	| /*epsilon*/ {

	}

FormalsList: FormalDecl {

}
	| FormalDecl COMMA FormalsList {

	}

FormalDecl: Type ID {
	tables->setLine($$.lineno);
	$$.func_info.push_back(varPair(typeToString($1.type), $2.str));
}
	| StructType ID {
		tables->setLine($$.lineno);
		$$.func_info.push_back(varPair(typeToString($1.type), $2.str));
	}


StructMemList: StructMem {
	tables->setLine($$.lineno);
	$$.func_info.push_back(varPair(typeToString($1.type), $1.str));
}
	| StructMem StructMemList {
		tables->setLine($$.lineno);
		$$.func_info.push_back(varPair(typeToString($1.type), $1.str));
	}

StructMem: Type ID SC {
	tables->setLine($$.lineno);
	$$.type = $1.type;
	$$.str = $2.str;
}

Statements: Statement {

}
	| Statements Statement {

	}

StartScope: /*epsilon*/ {
	tables->addScope();
}

Statement: StartScope LBRACE Statements RBRACE {
	tables->popScope();
}

	| Type ID SC {
	tables->setLine($$.lineno);
	tables->addVariable(typeToString($1.type), $2.str, $$.lineno);
}

	| StructType ID SC {

	}

	| STRUCT ID LBRACE StructMemList RBRACE SC {

	}

	| Type ID ASSIGN Exp SC {
		tables->setLine($$.lineno);

		string type1 = typeToString($1.type);
		string type2 = typeToString($4.type);
		if (tables->getFunction($4.str) != NULL) {
			// This is a function. Treat it as a function
			type2 = (tables->getFunction($4.str))->getType();
		}
		if (type1 == typeToString(types_Int) && type2 == typeToString(types_Byte)) {
			// It is allowed to assign byte to int
		}
		else if (type1 != type2) {
			errorMismatch(tables->getLine());
			exit(0);
		}
		tables->addVariable(typeToString($1.type), $2.str, $$.lineno);
	}

	| StructType ID ASSIGN Exp SC {

	}

	| ID ASSIGN Exp SC {
		tables->setLine($$.lineno);
		// Check ID exists
		if (!tables->existsId($1.str)) {
			errorUndef(tables->getLine(), $1.str);
			exit(0);
		}
		// Check correct type
		if ((tables->getVariable($1.str))->getType() != typeToString($3.type)) {
			errorMismatch(tables->getLine());
			exit(0);
		}
	}

	| ID PERIOD ID ASSIGN Exp SC {

	}

	| Call SC {

	}

	| RETURN SC {

	}

	| RETURN Exp SC {

	}

	| IF LPAREN Exp RPAREN Statement {

	}

	| ELSE Statement %prec IF LPAREN Exp RPAREN Statement {

	}

	| WHILE LPAREN Exp RPAREN Statement {

	}

	| BREAK SC {

	}

	| CONTINUE SC {

	}


Call: ID LPAREN ExpList RPAREN {
	$$.str = $1.str;
}
	| ID LPAREN RPAREN {
		$$.str = $1.str;
	}

ExpList: Exp {

}
	| Exp COMMA ExpList {

	}

Type: INT {
	$$.type = types_Int;
}

	| BYTE {
		$$.type = types_Byte;
	}

	| BOOL {
		$$.type = types_Bool;
	}

StructType: STRUCT ID {

}

Exp: Exp BINOPAS Exp {

}	| Exp BINOPMD Exp {

	}

	| ID {

	}

	| ID PERIOD ID {

	}

	| Call {
		$$.str = $1.str;
	}

	| NUM {
		$$.str = $1.str;
		tables->setLine($$.lineno);
		$$.type = types_Int;
	}

	| NUM B {
		$$.str = $1.str;
		int num = atoi($$.str.c_str());
		tables->setLine($$.lineno);
		if (num < 0 || num > 255) {
			errorByteTooLarge($$.lineno, $$.str);
			exit(0);
		}
		$$.type = types_Byte;
	}

	| STRING {
		$$.str = $1.str;
		tables->setLine($$.lineno);
		$$.type = types_String;
	}

	| TRUE {
		$$.str = $1.str;
		$$.type = types_Bool;
	}

	| FALSE {
		$$.str = $1.str;
		$$.type = types_Bool;
	}

	| NOT Exp {

	}

	| Exp AND Exp {

	}

	| Exp OR Exp {

	}

	| Exp RELOP Exp {

	}

%%

int main() {
	tables = new symbolTable();
	yyparse();
	delete tables;
	return 0;
}


void yyerror(const char *) {
	output::errorSyn(tables->getLine());
	exit(0);
}