%{

#include <iostream>
#include <cstdlib>
#include <cassert>
#include <string>
using namespace std;

#include "StackStructs.h"
#include "output.hpp"
#include "symbolTable.hpp"
using namespace output;

int yylex();
void yyerror(const char *);
symbolTable* tables = NULL;
void CheckCorrectTypes(string _type1, string id2, string _type2);

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token STRUCT
%left AND
%left OR
%right NOT
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%left SC
%token COMMA
%token PERIOD
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%left ASSIGN
%nonassoc RELOP
%left BINOPMD
%left BINOPAS
%token ID
%token NUM
%token STRING


%%
Program: Structs Funcs  {
}

Funcs: FuncDecl Funcs {
}
	|	/*epsilon*/ ;

FuncDecl: FuncDecl1 FuncDecl2 {
	if ($2.ret_type != types_Undefined && $1.type != $2.ret_type) {
		// return type is different from function type
		errorMismatch($2.lineno);
		exit(0);
	}
	tables->popScope();
}

FuncDecl1: RetType ID LPAREN Formals RPAREN {
	tables->addFunction(typeToString($1.type), $2.str, $4.func_info, $1.lineno);
	$$.type = $1.type;
	$$.lineno = $1.lineno;
}

FuncDecl2: LBRACE Statements RBRACE {
	$$.ret_type = $2.ret_type;
	$$.lineno = $2.lineno;
}

Structs: StructsDecl Structs {
}
	| /*epsilon*/ {

	}

StructsDecl: STRUCT ID LBRACE StructMemList RBRACE {
		// Struct without ;
		output::errorSyn($5.lineno);
		exit(0);
	}

	| STRUCT ID LBRACE StructMemList RBRACE SC {
		$$.str = string($2.str);
		tables->addStruct($$.str, $4.func_info, $1.lineno);
		$$.lineno = $1.lineno;
	}

RetType: Type {
	$$.type = $1.type;
}
	| VOID {
		$$.type = types_Void;
	}

Formals: FormalsList {
	tables->setLine($1.lineno);
	$$.func_info = $1.func_info;
}
	| /*epsilon*/ {
		$$.func_info.clear();
	}

FormalsList: FormalDecl {
	if ($1.struct_type != "") {
		// we have a struct type
		$$.func_info.insert($$.func_info.begin(),varPair($1.struct_type, $1.str));
	}
	else {
		$$.func_info.insert($$.func_info.begin(),varPair(typeToString($1.type), $1.str));
	}
	tables->setLine($1.lineno);
	$$.lineno = $1.lineno;
}
	| FormalDecl COMMA FormalsList {
		$$.func_info = $3.func_info;
		if ($1.struct_type != "") {
			// we have a struct type
			$$.func_info.insert($$.func_info.begin(),varPair($1.struct_type, $1.str));
		}
		else {
			$$.func_info.insert($$.func_info.begin(),varPair(typeToString($1.type), $1.str));
		}
		tables->setLine($1.lineno);
		$$.lineno = $1.lineno;
	}

FormalDecl: Type ID {
	tables->setLine($2.lineno);
	$$.lineno = $2.lineno;
	$$.type = $1.type;
	$$.str = $2.str;
}
	| StructType ID {
		tables->setLine($2.lineno);
		if (tables->getStruct($1.str) == NULL) {
			errorUndefStruct(tables->getLine(), $1.str);
			exit(0);
		}
		$$.str = $2.str;
		$$.struct_type = $1.str;
		$$.lineno = $2.lineno;
	}


StructMemList: StructMem {
	$$.func_info.insert($$.func_info.begin(),varPair(typeToString($1.type), $1.str));
}
	| StructMem StructMemList {
		$$.func_info = $2.func_info;
		$$.func_info.insert($$.func_info.begin(),varPair(typeToString($1.type), $1.str));
	}

StructMem: Type ID SC {
	tables->setLine($2.lineno);
	$$.lineno = $2.lineno;
	$$.type = $1.type;
	$$.str = $2.str;
}

Statements: Statement {
	if ($1.ret_type != types_Undefined) {
		$$.ret_type = $1.ret_type;
	}
	$$.lineno = $1.lineno;
	tables->setLine($$.lineno);
}
	| Statements Statement {
		if ($2.ret_type != types_Undefined) {
			$$.ret_type = $2.ret_type;
		}
		$$.lineno = $2.lineno;
		tables->setLine($$.lineno);
	}

StartScope: /*epsilon*/ {
	tables->addScope();
}

Statement: StartScope LBRACE Statements RBRACE {
	tables->popScope();
}

	| Type ID SC {
	tables->addVariable(typeToString($1.type), $2.str, $1.lineno);
}

	| StructType ID SC {
		tables->addVariable($1.str, $2.str, $1.lineno);
	}

	| STRUCT ID LBRACE StructMemList RBRACE {
		// Struct without ;
		output::errorSyn($5.lineno);
		exit(0);
	}

	| STRUCT ID LBRACE StructMemList RBRACE SC {
		$$.str = string($2.str);
		tables->addStruct($$.str, $4.func_info, $1.lineno);
		$$.lineno = $1.lineno;
	}

	| Type ID ASSIGN Exp SC {
		tables->setLine($1.lineno);
		if ($4.type == types_Undefined) {
			// We have a struct type
			CheckCorrectTypes(typeToString($1.type), $4.str, $4.struct_type);
		} else {
			CheckCorrectTypes(typeToString($1.type), $4.str, typeToString($4.type));
		}
		tables->addVariable(typeToString($1.type), $2.str, $4.lineno);
	}

	| StructType ID ASSIGN Exp SC {
		if ($4.type == types_Undefined) {
			// We have a struct type
			CheckCorrectTypes($1.struct_type, $4.str, $4.struct_type);
		} else {
			CheckCorrectTypes($1.struct_type, $4.str, typeToString($4.type));
		}
		tables->addVariable($1.str, $2.str, $1.lineno);
	}

	| ID ASSIGN Exp SC {
		tables->setLine($$.lineno);
		// Check ID exists
		if (!tables->existsId($1.str)) {
			errorUndef(tables->getLine(), $1.str);
			exit(0);
		}
		// Check correct type
		if ($3.type == types_Undefined) {
			// We have a struct type
			CheckCorrectTypes((tables->getVariable($1.str))->getType(), $3.str, $3.struct_type);
		} else {
			CheckCorrectTypes((tables->getVariable($1.str))->getType(), $3.str, typeToString($3.type));
		}
	}

	| ID PERIOD ID ASSIGN Exp SC {
		$$.lineno = $1.lineno;
		tables->setLine($$.lineno);
		// Check if variable of struct type exists
		VariableEntry* var_entry = tables->getVariable($1.str);
		if (var_entry == NULL) {
			errorUndef(tables->getLine(), $1.str);
			exit(0);
		}
		// Check if struct itself exists
		StructEntry* struct_entry = tables->getStruct((tables->getVariable($1.str))->getType());
		if (struct_entry == NULL) {
			errorUndefStruct(tables->getLine(), $1.str);
			exit(0);
		}
		// Check if field of struct exists
		if (!struct_entry->varExists($3.str)) {
			errorUndef(tables->getLine(), $3.str);
			exit(0);
		}
		// Check type mismatch
		if ($5.type == types_Undefined) {
			// We have a struct type cast into field type...
			errorMismatch($$.lineno);
			exit(0);
		}
		if (!typesEqual(struct_entry->getTypeOfVar($3.str), typeToString($5.type))) {
			errorMismatch(tables->getLine());
			exit(0);
		}
	}

	| Call SC {

	}

	| RETURN SC {

	}

	| RETURN Exp SC {
		$$.ret_type = $2.type;
		$$.lineno = $1.lineno;
	}

	| StartScope IF LPAREN Exp RPAREN Statement {
		if ($4.type != types_Bool) {
			errorMismatch($2.lineno);
			exit(0);
		}
	}

	| StartScope ELSE Statement %prec IF LPAREN Exp RPAREN Statement {

	}

	| StartScope WHILE LPAREN Exp RPAREN Statement {

	}

	| BREAK SC {

	}

	| CONTINUE SC {

	}


Call: ID LPAREN ExpList RPAREN {
	$$.str = $1.str;
	tables->callFunction($1.str, $3.func_info, $1.lineno);
}
	| ID LPAREN RPAREN {
		$$.str = $1.str;
		vector<varPair> t;
		tables->callFunction($1.str, t, $1.lineno);
	}

ExpList: Exp {
	if ($1.type == types_Undefined) {
		$$.func_info.insert($$.func_info.begin(), varPair($1.struct_type, $1.str));
	} else {
		$$.func_info.insert($$.func_info.begin(), varPair(typeToString($1.type), $1.str));
	}
	$$.type = $1.type;
	$$.str = $1.str;
}
	| Exp COMMA ExpList {
		$$.func_info = $3.func_info;
		$$.type = $1.type;
		if ($1.type == types_Undefined) {
			$$.func_info.insert($$.func_info.begin(), varPair($1.struct_type, $1.str));
		} else {
			$$.func_info.insert($$.func_info.begin(), varPair(typeToString($1.type), $1.str));
		}

	}

Type: INT {
	$$.type = types_Int;
}

	| BYTE {
		$$.type = types_Byte;
	}

	| BOOL {
		$$.type = types_Bool;
	}

StructType: STRUCT ID {
	$$.str = $2.str;
}

Exp: Exp BINOPAS Exp {

}	| Exp BINOPMD Exp {

	}

	| ID {
		$$.str = $1.str;
		$$.lineno = $1.lineno;
		// Check if function
		if (tables->getFunction($1.str) != NULL) {
			$$.type = stringToType((tables->getFunction($1.str))->getType());
		}
		// Check if variable
		else if (tables->getVariable($1.str) != NULL) {
			$$.type = stringToType((tables->getVariable($1.str))->getType());
		}
		else {
			// Not defined ...
			errorUndef($$.lineno, $$.str);
			exit(0);
		}
		if ($$.type == types_Undefined) {
			// We probably have a struct type...
			VariableEntry* var = tables->getVariable($$.str);
			StructEntry* struct_type = tables->getStruct(var->getType());
			if (struct_type == NULL) {
				// WTF?
				errorUndefStruct($$.lineno, $$.str);
				exit(0);
			}
			$$.struct_type = struct_type->getId();
		}
	}

	| ID PERIOD ID {
		$$.lineno = $1.lineno;
		tables->setLine($$.lineno);
		// Check if variable of struct type exists
		VariableEntry* var_entry = tables->getVariable($1.str);
		if (var_entry == NULL) {
			errorUndef(tables->getLine(), $1.str);
			exit(0);
		}
		// Check if struct itself exists
		StructEntry* struct_entry = tables->getStruct((tables->getVariable($1.str))->getType());
		if (struct_entry == NULL) {
			errorUndefStruct(tables->getLine(), $1.str);
			exit(0);
		}
		// Check if field of struct exists
		if (!struct_entry->varExists($3.str)) {
			errorUndef(tables->getLine(), $3.str);
			exit(0);
		}
		$$.type = stringToType(struct_entry->getTypeOfVar($3.str));
		$$.str = string($1.str + "." + $3.str);
	}

	| Call {
		$$.str = $1.str;
		$$.lineno = $1.lineno;
		FunctionEntry* func_entry = tables->getFunction($$.str);
		if (func_entry == NULL) {
			errorUndefFunc($$.lineno, $$.str);
			exit(0);
		}
		$$.type = stringToType(func_entry->getType());
	}

	| NUM {
		$$.str = $1.str;
		tables->setLine($$.lineno);
		$$.type = types_Int;
		$$.lineno = $1.lineno;
	}

	| NUM B {
		$$.str = $1.str;
		int num = atoi($$.str.c_str());
		tables->setLine($$.lineno);
		if (num < 0 || num > 255) {
			errorByteTooLarge($$.lineno, $$.str);
			exit(0);
		}
		$$.type = types_Byte;
		$$.lineno = $1.lineno;
	}

	| STRING {
		$$.str = $1.str;
		$$.type = types_String;
		$$.lineno = $1.lineno;
		tables->setLine($$.lineno);
	}

	| TRUE {
		$$.str = $1.str;
		$$.type = types_Bool;
		$$.lineno = $1.lineno;
	}

	| FALSE {
		$$.str = $1.str;
		$$.type = types_Bool;
		$$.lineno = $1.lineno;
	}

	| NOT Exp {
		if ($2.type != types_Bool) {
			// Not can only be used on booleans
			errorMismatch($1.lineno);
			exit(0);
		}
		$$.type = types_Bool;
	}

	| Exp AND Exp {

	}

	| Exp OR Exp {

	}

	| Exp RELOP Exp {
		// TODO : check if binary operation is legal between 2 Exp's
		$$.type = types_Bool;
		$$.lineno = $2.lineno;
	}

%%

int main() {
	tables = new symbolTable();
	yyparse();
	delete tables;
	return 0;
}


void yyerror(const char *) {
	output::errorSyn(tables->getLine());
	exit(0);
}

void CheckCorrectTypes(string type1, string id2, string type2) {
		if (tables->getFunction(id2) == NULL && tables->getVariable(id2) == NULL && type2 == typeToString(types_Undefined)) {
			// The parameter is neither a function or a variable. ERROR!
			errorUndef(tables->getLine(), id2);
			exit(0);
		}

		if (tables->getVariable(id2) != NULL && type2 == "undefined") {
			// Try to get the type from the table
			type2 = (tables->getVariable(id2))->getType();
		}
		if (tables->getFunction(id2) != NULL) {
			// This is a function. Treat it as a function
			type2 = (tables->getFunction(id2))->getType();
		}

		if (!typesEqual(type1, type2)) {
			errorMismatch(tables->getLine());
			exit(0);
		}
}