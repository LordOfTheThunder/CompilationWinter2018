%{

#include <iostream>
#include <cstdlib>
#include <cassert>
using namespace std;

#include "StackStructs.h"
#include "output.hpp"
#include "symbolTable.hpp"
using namespace output;

int yylex();
void yyerror(const char *);
symbolTable* tables = NULL;

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token STRUCT
%left AND
%left OR
%right NOT
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token PERIOD
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%left ASSIGN
%nonassoc RELOP
%left BINOPMD
%left BINOPAS
%token ID
%token NUM
%token STRING


%%
Program: Structs Funcs  {
}

Funcs: FuncDecl Funcs {
}
	|	/*epsilon*/ ;

FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {
	tables->addScope(tables->getLine());
}

Structs: StructsDecl Structs {

}
	| /*epsilon*/ {

	}

StructsDecl: STRUCT ID LBRACE StructMemList RBRACE SC {

}

RetType: Type {

}
	| VOID {

	}

Formals: FormalsList {

}
	| /*epsilon*/ {

	}

FormalsList: FormalDecl {

}
	| FormalDecl COMMA FormalsList {

	}

FormalDecl: Type ID {
	tables->addVariable($1.type, $2.str);
	tables->setLine($$.lineno);
}
	| StructType ID {

	}


StructMemList: StructMem {

}
	| StructMem StructMemList {

	}

StructMem: Type ID SC {

	}

Statements: Statement {

}
	| Statements Statement {

	}

Statement: Type ID SC {
	tables->setLine($$.lineno);
	tables->addVariable($1.type, $2.str);
}

	| StructType ID SC {

	}

	| STRUCT ID LBRACE StructMemList RBRACE SC {

	}

	| Type ID ASSIGN Exp SC {
		tables->setLine($$.lineno);
		if ($1.type != $4.type) {
			errorMismatch(tables->getLine());
			exit(0);
		}
		tables->addVariable($1.type, $2.str);
	}

	| StructType ID ASSIGN Exp SC {

	}

	| ID ASSIGN Exp SC {
		if (!tables->existsId($1.str)) {
			errorUndef(tables->getLine(), $1.str);
			exit(0);
		}
		tables->setLine($$.lineno);
		tables->addVariable((tables->getVariable($1.str))->getType(), $2.str);
	}

	| ID PERIOD ID ASSIGN Exp SC {

	}

	| Call SC {

	}

	| RETURN SC {

	}

	| RETURN Exp SC {

	}

	| IF LPAREN Exp RPAREN Statement {

	}

	| ELSE Statement %prec IF LPAREN Exp RPAREN Statement {

	}

	| WHILE LPAREN Exp RPAREN Statement {

	}

	| BREAK SC {

	}

	| CONTINUE SC {

	}


Call: ID LPAREN ExpList RPAREN {

}
	| ID LPAREN RPAREN {

	}

ExpList: Exp {

}
	| Exp COMMA ExpList {

	}

Type: INT {
	$$.type = types_Int;
}

	| BYTE {
		$$.type = types_Byte;
	}

	| BOOL {
		$$.type = types_Bool;
	}

StructType: STRUCT ID {

}

Exp: Exp BINOPAS Exp {

}	| Exp BINOPMD Exp {

	}

	| ID {

	}

	| ID PERIOD ID {

	}

	| Call {

	}

	| NUM {
		$$.str = $1.str;
		tables->setLine($$.lineno);
		$$.type = types_Int;
	}

	| NUM B {
		$$.str = $1.str;
		int num = atoi($$.str.c_str());
		tables->setLine($$.lineno);
		if (num < 0 || num > 255) {
			errorByteTooLarge($$.lineno, $$.str);
			exit(0);
		}
		$$.type = types_Byte;
	}

	| STRING {

	}

	| TRUE {
		$$.str = $1.str;
		$$.type = types_Bool;
	}

	| FALSE {
		$$.str = $1.str;
		$$.type = types_Bool;
	}

	| NOT Exp {

	}

	| Exp AND Exp {

	}

	| Exp OR Exp {

	}

	| Exp RELOP Exp {

	}

%%

int main() {
	tables = new symbolTable();
	yyparse();
	delete tables;
	return 0;
}


void yyerror(const char *) {
	output::errorSyn(tables->getLine());
	exit(0);
}